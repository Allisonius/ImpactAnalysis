grades
teaches
enrolled
projects
(teaches.c)
(enrolled.c)
(projects.ps1)
(projects.ps2)
(c.grades)
(p.teaches)
(c.projects)
(p.enrolled)
(p.projects)
(teaches.grades)
(enrolled.grades)
(teaches.projects)
(enrolled.projects)
c
p
ps1
ps2
Next
First
ordering/Ord
(~teaches)
(~enrolled)
(~projects)
(p.(teaches.grades))
(p.(enrolled.grades))
(p.(teaches.projects))
(p.(enrolled.projects))
Grade
Course
Person
Project
Student
Professor
(Course.grades)
(Person.teaches)
(Course.projects)
(Person.enrolled)
(Person.projects)
(Student.teaches)
(Student.enrolled)
(Student.projects)
(Professor.teaches)
(Professor.enrolled)
(Professor.projects)
(Person.(teaches.grades))
(Person.(enrolled.grades))
(Student.(teaches.grades))
(Person.(teaches.projects))
(Student.(enrolled.grades))
(Person.(enrolled.projects))
(Professor.(teaches.grades))
(Student.(teaches.projects))
(Professor.(enrolled.grades))
(Student.(enrolled.projects))
(Professor.(teaches.projects))
(Professor.(enrolled.projects))
(ps1-ps2)
(ps2&ps1)
(ps2+ps1)
(ps2-ps1)
(Course-c)
(Person-p)
(Student&p)
(Student+p)
(Student-p)
(p-Student)
(none->none)
(Professor&p)
(Professor+p)
(Professor-p)
(Project-ps1)
(Project-ps2)
(p-Professor)
(c&(Course-c))
(p&(Person-p))
(p&(Student-p))
(p&(p-Student))
(ps1&(ps1-ps2))
(ps1&(ps2-ps1))
(ps2&(ps1-ps2))
(ps2&(ps2-ps1))
(Person-Student)
(p&(Professor-p))
(p&(p-Professor))
(Person-Professor)
(enrolled-teaches)
(none->none->none)
(teaches&enrolled)
(teaches+enrolled)
(teaches-enrolled)
((Project-ps1)-ps2)
((Project-ps2)-ps1)
(Professor&Student)
(Professor+Student)
(Professor-Student)
(Project-(ps1-ps2))
(Project-(ps2&ps1))
(Project-(ps2-ps1))
(Student-Professor)
(ps1&(Project-ps1))
(ps1&(Project-ps2))
(ps1+(Project-ps2))
(ps1-(Project-ps2))
(ps2&(Project-ps1))
(ps2&(Project-ps2))
(ps2+(Project-ps1))
(ps2-(Project-ps1))
((Person-Student)-p)
((Person-p)-Student)
(Person-(Student&p))
(Person-(Student-p))
(Person-(p-Student))
(Student&(Person-p))
(Student+(Person-p))
(Student-(Person-p))
(p&(Person-Student))
(p+(Person-Student))
(p-(Person-Student))
(Student&(Student-p))
(Student&(p-Student))
((Person-Professor)-p)
((Person-p)-Professor)
(Person-(Professor&p))
(Person-(Professor-p))
(Person-(p-Professor))
(Professor&(Person-p))
(Professor+(Person-p))
(Professor-(Person-p))
(p&(Person-Professor))
(p+(Person-Professor))
(p-(Person-Professor))
((Professor+Student)-p)
((Professor+p)-Student)
((Professor-Student)-p)
((Professor-p)-Student)
((Student+p)-Professor)
((Student-Professor)-p)
((Student-p)-Professor)
((p-Professor)-Student)
((p-Student)-Professor)
(Professor&(Student&p))
(Professor&(Student+p))
(Professor&(Student-p))
(Professor&(p-Student))
(Professor+(Student&p))
(Professor+(Student+p))
(Professor+(Student-p))
(Professor+(p-Student))
(Professor-(Student&p))
(Professor-(Student-p))
(Professor-(p-Student))
(Student&(Professor&p))
(Student&(Professor+p))
(Student&(Professor-p))
(Student&(p-Professor))
(Student+(Professor&p))
(Student+(Professor+p))
(Student+(Professor-p))
(Student+(p-Professor))
(Student-(Professor&p))
(Student-(Professor-p))
(Student-(p-Professor))
(p&(Professor&Student))
(p&(Professor+Student))
(p&(Professor-Student))
(p&(Student-Professor))
(p+(Professor&Student))
(p+(Professor+Student))
(p+(Professor-Student))
(p+(Student-Professor))
(p-(Professor&Student))
(p-(Professor-Student))
(p-(Student-Professor))
(Professor&(Professor-p))
(Professor&(p-Professor))
(Student&(Person-Student))
((Person-Professor)-Student)
((Person-Student)-Professor)
(Person-(Professor&Student))
(Person-(Professor-Student))
(Person-(Student-Professor))
(Professor&(Person-Student))
(Professor+(Person-Student))
(Professor-(Person-Student))
(Student&(Person-Professor))
(Student+(Person-Professor))
(Student-(Person-Professor))
(teaches&(enrolled-teaches))
(teaches&(teaches-enrolled))
(Student&(Professor-Student))
(Student&(Student-Professor))
(enrolled&(enrolled-teaches))
(enrolled&(teaches-enrolled))
(Professor&(Person-Professor))
(Professor&(Professor-Student))
(Professor&(Student-Professor))
(Next.univ)
(univ.Next)
(First.univ)
(Next.Grade)
(univ.First)
(First.Grade)
(grades.univ)
(univ.grades)
(grades.Grade)
(teaches.univ)
(univ.teaches)
((p.teaches)-c)
((teaches.c)-p)
(c&(p.teaches))
(c+(p.teaches))
(c-(p.teaches))
(enrolled.univ)
(p&(teaches.c))
(p+(teaches.c))
(p-(teaches.c))
(projects.univ)
(univ.enrolled)
(univ.projects)
((enrolled.c)-p)
((p.enrolled)-c)
(c&(p.enrolled))
(c+(p.enrolled))
(c-(p.enrolled))
(p&(enrolled.c))
(p+(enrolled.c))
(p-(enrolled.c))
(teaches.Course)
(enrolled.Course)
((c.projects)-ps1)
((c.projects)-ps2)
((p.projects)-ps1)
((p.projects)-ps2)
((projects.ps1)-c)
((projects.ps1)-p)
((projects.ps2)-c)
((projects.ps2)-p)
((teaches.univ)-p)
((univ.teaches)-c)
(c&(projects.ps1))
(c&(projects.ps2))
(c&(univ.teaches))
(c+(projects.ps1))
(c+(projects.ps2))
(c+(univ.teaches))
(c-(projects.ps1))
(c-(projects.ps2))
(c-(univ.teaches))
(p&(projects.ps1))
(p&(projects.ps2))
(p&(teaches.univ))
(p+(projects.ps1))
(p+(projects.ps2))
(p+(teaches.univ))
(p-(projects.ps1))
(p-(projects.ps2))
(p-(teaches.univ))
(projects.Project)
(ps1&(c.projects))
(ps1&(p.projects))
(ps1+(c.projects))
(ps1+(p.projects))
(ps1-(c.projects))
(ps1-(p.projects))
(ps2&(c.projects))
(ps2&(p.projects))
(ps2+(c.projects))
(ps2+(p.projects))
(ps2-(c.projects))
(ps2-(p.projects))
((Course-c).grades)
((Next.univ)-First)
((enrolled.univ)-p)
((projects.univ)-c)
((projects.univ)-p)
((univ.enrolled)-c)
(First&(Next.univ))
(First+(Next.univ))
(First-(Next.univ))
(c&(projects.univ))
(c&(univ.enrolled))
(c+(projects.univ))
(c+(univ.enrolled))
(c-(projects.univ))
(c-(univ.enrolled))
(ordering/Ord.Next)
(p&(enrolled.univ))
(p&(projects.univ))
(p+(enrolled.univ))
(p+(projects.univ))
(p-(enrolled.univ))
(p-(projects.univ))
((Next.Grade)-First)
((Person-p).teaches)
((Person.teaches)-c)
((teaches.Course)-p)
(Course-(p.teaches))
(First&(Next.Grade))
(First+(Next.Grade))
(First-(Next.Grade))
(Grade-(univ.First))
(Person-(teaches.c))
(c&(Person.teaches))
(c+(Person.teaches))
(c-(Person.teaches))
(ordering/Ord.First)
(p&(teaches.Course))
(p+(teaches.Course))
(p-(teaches.Course))
(projects.(ps1-ps2))
(projects.(ps2&ps1))
(projects.(ps2+ps1))
(projects.(ps2-ps1))
(teaches.(Course-c))
((Course-c).projects)
((Person-p).enrolled)
((Person-p).projects)
((Person.enrolled)-c)
((Student&p).teaches)
((Student+p).teaches)
((Student-p).teaches)
((Student.teaches)-c)
((enrolled.Course)-p)
((p-Student).teaches)
((teaches.c)-Student)
((univ.projects)-ps1)
((univ.projects)-ps2)
(Course-(p.enrolled))
(Person-(enrolled.c))
(Student&(teaches.c))
(Student+(teaches.c))
(Student-(teaches.c))
(c&(Person.enrolled))
(c&(Student.teaches))
(c+(Person.enrolled))
(c+(Student.teaches))
(c-(Person.enrolled))
(c-(Student.teaches))
(enrolled.(Course-c))
(p&(enrolled.Course))
(p+(enrolled.Course))
(p-(enrolled.Course))
(ps1&(univ.projects))
(ps1+(univ.projects))
(ps1-(univ.projects))
(ps2&(univ.projects))
(ps2+(univ.projects))
(ps2-(univ.projects))
((Student&p).enrolled)
((Student&p).projects)
((Student+p).enrolled)
((Student+p).projects)
((Student-p).enrolled)
((Student-p).projects)
((Student.enrolled)-c)
((enrolled-teaches).c)
((enrolled.c)-Student)
((p-Student).enrolled)
((p-Student).projects)
((projects.Project)-c)
((projects.Project)-p)
((teaches&enrolled).c)
((teaches+enrolled).c)
((teaches-enrolled).c)
(Project-(c.projects))
(Project-(p.projects))
(Student&(enrolled.c))
(Student+(enrolled.c))
(Student-(enrolled.c))
(c&(Student.enrolled))
(c&(projects.Project))
(c+(Student.enrolled))
(c+(projects.Project))
(c-(Student.enrolled))
(c-(projects.Project))
(p&(projects.Project))
(p+(projects.Project))
(p-(projects.Project))
(p.(enrolled-teaches))
(p.(teaches&enrolled))
(p.(teaches+enrolled))
(p.(teaches-enrolled))
((Course.projects)-ps1)
((Course.projects)-ps2)
((Person.projects)-ps1)
((Person.projects)-ps2)
((Professor&p).teaches)
((Professor+p).teaches)
((Professor-p).teaches)
((Professor.teaches)-c)
((p-Professor).teaches)
((teaches.c)-Professor)
(Course-(projects.ps1))
(Course-(projects.ps2))
(Course-(univ.teaches))
(Person-(projects.ps1))
(Person-(projects.ps2))
(Person-(teaches.univ))
(Professor&(teaches.c))
(Professor+(teaches.c))
(Professor-(teaches.c))
(c&(Professor.teaches))
(c+(Professor.teaches))
(c-(Professor.teaches))
(ps1&(Course.projects))
(ps1&(Person.projects))
(ps1+(Course.projects))
(ps1+(Person.projects))
(ps1-(Course.projects))
(ps1-(Person.projects))
(ps2&(Course.projects))
(ps2&(Person.projects))
(ps2+(Course.projects))
(ps2+(Person.projects))
(ps2-(Course.projects))
(ps2-(Person.projects))
((Professor&p).enrolled)
((Professor&p).projects)
((Professor+p).enrolled)
((Professor+p).projects)
((Professor-p).enrolled)
((Professor-p).projects)
((Professor.enrolled)-c)
((Student.projects)-ps1)
((Student.projects)-ps2)
((enrolled.c)-Professor)
((p-Professor).enrolled)
((p-Professor).projects)
((projects.ps1)-Student)
((projects.ps2)-Student)
((teaches.univ)-Student)
(Course-(projects.univ))
(Course-(univ.enrolled))
(Person-(enrolled.univ))
(Person-(projects.univ))
(Professor&(enrolled.c))
(Professor+(enrolled.c))
(Professor-(enrolled.c))
(Student&(projects.ps1))
(Student&(projects.ps2))
(Student&(teaches.univ))
(Student+(projects.ps1))
(Student+(projects.ps2))
(Student+(teaches.univ))
(Student-(projects.ps1))
(Student-(projects.ps2))
(Student-(teaches.univ))
(c&(Professor.enrolled))
(c+(Professor.enrolled))
(c-(Professor.enrolled))
(projects.(Project-ps1))
(projects.(Project-ps2))
(ps1&(Student.projects))
(ps1+(Student.projects))
(ps1-(Student.projects))
(ps2&(Student.projects))
(ps2+(Student.projects))
(ps2-(Student.projects))
((enrolled-teaches).univ)
((enrolled.univ)-Student)
((projects.univ)-Student)
((teaches&enrolled).univ)
((teaches+enrolled).univ)
((teaches-enrolled).univ)
(Course-(Person.teaches))
(Person-(teaches.Course))
(Project-(univ.projects))
(Student&(enrolled.univ))
(Student&(projects.univ))
(Student+(enrolled.univ))
(Student+(projects.univ))
(Student-(enrolled.univ))
(Student-(projects.univ))
(univ.(enrolled-teaches))
(univ.(teaches&enrolled))
(univ.(teaches+enrolled))
(univ.(teaches-enrolled))
((Person-Student).teaches)
((Professor.projects)-ps1)
((Professor.projects)-ps2)
((projects.ps1)-Professor)
((projects.ps2)-Professor)
((teaches.Course)-Student)
((teaches.univ)-Professor)
(Course-(Person.enrolled))
(Course-(Student.teaches))
(Person-(enrolled.Course))
(Professor&(projects.ps1))
(Professor&(projects.ps2))
(Professor&(teaches.univ))
(Professor+(projects.ps1))
(Professor+(projects.ps2))
(Professor+(teaches.univ))
(Professor-(projects.ps1))
(Professor-(projects.ps2))
(Professor-(teaches.univ))
(Student&(teaches.Course))
(Student+(teaches.Course))
(Student-(teaches.Course))
(ps1&(Professor.projects))
(ps1+(Professor.projects))
(ps1-(Professor.projects))
(ps2&(Professor.projects))
(ps2+(Professor.projects))
(ps2-(Professor.projects))
((Person-Student).enrolled)
((Person-Student).projects)
((enrolled-teaches).Course)
((enrolled-teaches).grades)
((enrolled.Course)-Student)
((enrolled.univ)-Professor)
((projects.univ)-Professor)
((teaches&enrolled).Course)
((teaches&enrolled).grades)
((teaches+enrolled).Course)
((teaches+enrolled).grades)
((teaches-enrolled).Course)
((teaches-enrolled).grades)
(Course-(Student.enrolled))
(Course-(projects.Project))
(Person-(projects.Project))
(Person.(enrolled-teaches))
(Person.(teaches&enrolled))
(Person.(teaches+enrolled))
(Person.(teaches-enrolled))
(Professor&(enrolled.univ))
(Professor&(projects.univ))
(Professor+(enrolled.univ))
(Professor+(projects.univ))
(Professor-(enrolled.univ))
(Professor-(projects.univ))
(Project-(Course.projects))
(Project-(Person.projects))
(Student&(enrolled.Course))
(Student+(enrolled.Course))
(Student-(enrolled.Course))
(ordering/Ord-(First.univ))
((Person-Professor).teaches)
((projects.Project)-Student)
((teaches.Course)-Professor)
(Course-(Professor.teaches))
(Grade-(ordering/Ord.First))
(Professor&(teaches.Course))
(Professor+(teaches.Course))
(Professor-(teaches.Course))
(Project-(Student.projects))
(Student&(projects.Project))
(Student+(projects.Project))
(Student-(projects.Project))
(Student.(enrolled-teaches))
(Student.(teaches&enrolled))
(Student.(teaches+enrolled))
(Student.(teaches-enrolled))
(ordering/Ord-(First.Grade))
((Person-Professor).enrolled)
((Person-Professor).projects)
((Professor&Student).teaches)
((Professor+Student).teaches)
((Professor-Student).teaches)
((Student-Professor).teaches)
((enrolled-teaches).projects)
((enrolled.Course)-Professor)
((teaches&enrolled).projects)
((teaches+enrolled).projects)
((teaches-enrolled).projects)
((teaches.projects)-projects)
(Course-(Professor.enrolled))
(Professor&(enrolled.Course))
(Professor+(enrolled.Course))
(Professor-(enrolled.Course))
(projects&(teaches.projects))
(projects+(teaches.projects))
(projects-(teaches.projects))
((Professor&Student).enrolled)
((Professor&Student).projects)
((Professor+Student).enrolled)
((Professor+Student).projects)
((Professor-Student).enrolled)
((Professor-Student).projects)
((Student-Professor).enrolled)
((Student-Professor).projects)
((enrolled.projects)-projects)
((projects.Project)-Professor)
(Professor&(projects.Project))
(Professor+(projects.Project))
(Professor-(projects.Project))
(Professor.(enrolled-teaches))
(Professor.(teaches&enrolled))
(Professor.(teaches+enrolled))
(Professor.(teaches-enrolled))
(Project-(Professor.projects))
(projects&(enrolled.projects))
(projects+(enrolled.projects))
(projects-(enrolled.projects))
(p.(c.grades))
((grades.univ).p)
(c.(grades.univ))
(p.(univ.grades))
(univ.(c.grades))
((Next.univ).univ)
((grades.Grade).p)
(Next.(univ.Next))
(c.(grades.Grade))
(univ.(Next.univ))
(univ.(univ.Next))
((First.univ).Next)
((Next.Grade).univ)
((Next.univ).Grade)
(First.(univ.Next))
(Grade.(univ.Next))
(Next.(univ.First))
(Person.(c.grades))
(p.(Course.grades))
(univ.(Next.Grade))
((First.Grade).Next)
((First.univ).First)
((Next.Grade).Grade)
((grades.univ).univ)
(First.(univ.First))
(Student.(c.grades))
(grades.(univ.Next))
(univ.(grades.univ))
(univ.(univ.grades))
((First.Grade).First)
((grades.Grade).univ)
((teaches.c).teaches)
(grades.(univ.First))
(teaches.(p.teaches))
(univ.(grades.Grade))
((enrolled.c).teaches)
((grades.univ).Person)
((teaches.c).enrolled)
((teaches.c).projects)
(Course.(grades.univ))
(Person.(univ.grades))
(Professor.(c.grades))
(enrolled.(p.teaches))
(teaches.(p.enrolled))
(univ.(Course.grades))
((enrolled.c).enrolled)
((enrolled.c).projects)
((grades.Grade).Person)
((grades.univ).Student)
((grades.univ).teaches)
((projects.ps1).grades)
((projects.ps2).grades)
(Course.(grades.Grade))
(Student.(univ.grades))
(enrolled.(p.enrolled))
(projects.(c.projects))
(projects.(p.projects))
(teaches.(grades.univ))
(univ.(teaches.grades))
((grades.Grade).Student)
((grades.Grade).teaches)
((grades.univ).enrolled)
((grades.univ).projects)
((projects.ps1).teaches)
((projects.ps2).teaches)
((projects.univ).grades)
((teaches.univ).teaches)
(Person.(Course.grades))
(enrolled.(grades.univ))
(teaches.(grades.Grade))
(teaches.(projects.ps1))
(teaches.(projects.ps2))
(teaches.(univ.teaches))
(univ.(enrolled.grades))
((enrolled.univ).teaches)
((grades.Grade).enrolled)
((grades.Grade).projects)
((grades.univ).Professor)
((projects.ps1).enrolled)
((projects.ps1).projects)
((projects.ps2).enrolled)
((projects.ps2).projects)
((projects.univ).teaches)
((teaches.univ).enrolled)
((teaches.univ).projects)
(Professor.(univ.grades))
(Student.(Course.grades))
(enrolled.(grades.Grade))
(enrolled.(projects.ps1))
(enrolled.(projects.ps2))
(enrolled.(univ.teaches))
(teaches.(projects.univ))
(teaches.(univ.enrolled))
(univ.(teaches.projects))
((enrolled.univ).enrolled)
((enrolled.univ).projects)
((grades.Grade).Professor)
((projects.univ).enrolled)
((projects.univ).projects)
((teaches.Course).teaches)
(Next.(ordering/Ord.Next))
(enrolled.(projects.univ))
(enrolled.(univ.enrolled))
(ordering/Ord.(Next.univ))
(projects.(univ.projects))
(teaches.(Person.teaches))
(univ.(enrolled.projects))
(univ.(ordering/Ord.Next))
((enrolled.Course).teaches)
((projects.Project).grades)
((teaches.Course).enrolled)
((teaches.Course).projects)
(First.(ordering/Ord.Next))
(Grade.(ordering/Ord.Next))
(Next.(ordering/Ord.First))
(Professor.(Course.grades))
(enrolled.(Person.teaches))
(ordering/Ord.(Next.Grade))
(teaches.(Person.enrolled))
(teaches.(Student.teaches))
((enrolled.Course).enrolled)
((enrolled.Course).projects)
((projects.Project).teaches)
(First.(ordering/Ord.First))
(enrolled.(Person.enrolled))
(enrolled.(Student.teaches))
(grades.(ordering/Ord.Next))
(projects.(Course.projects))
(projects.(Person.projects))
(teaches.(Student.enrolled))
(teaches.(projects.Project))
((projects.Project).enrolled)
((projects.Project).projects)
(enrolled.(Student.enrolled))
(enrolled.(projects.Project))
(grades.(ordering/Ord.First))
(projects.(Student.projects))
(teaches.(Professor.teaches))
(enrolled.(Professor.teaches))
(teaches.(Professor.enrolled))
(enrolled.(Professor.enrolled))
(projects.(Professor.projects))
(~First)
(~(enrolled-teaches))
(~(teaches&enrolled))
(~(teaches+enrolled))
(~(teaches-enrolled))
(~(c.grades))
((~teaches).p)
(~(Next.univ))
(~(univ.Next))
((~First).Next)
((~First).univ)
((~enrolled).p)
((~projects).c)
((~projects).p)
(Next.(~First))
(~(Next.Grade))
((~First).First)
(First.(~First))
(~(grades.univ))
(~(univ.grades))
((~teaches).univ)
(grades.(~First))
(~(grades.Grade))
((~enrolled).univ)
((~projects).univ)
(~(Course.grades))
((~teaches).Person)
((~enrolled).Person)
((~projects).Course)
((~projects).Person)
((~projects).grades)
((~teaches).Student)
((~teaches).teaches)
(teaches.(~teaches))
((~enrolled).Student)
((~enrolled).teaches)
((~projects).Student)
((~projects).teaches)
((~teaches).enrolled)
((~teaches).projects)
(enrolled.(~teaches))
(teaches.(~enrolled))
(~(teaches.projects))
((~enrolled).enrolled)
((~enrolled).projects)
((~projects).enrolled)
((~projects).projects)
((~teaches).Professor)
(enrolled.(~enrolled))
(projects.(~projects))
(~(enrolled.projects))
(~(ordering/Ord.Next))
((~First).ordering/Ord)
((~enrolled).Professor)
((~projects).Professor)
(^(univ.Next))
(^(ordering/Ord.Next))
(*(univ.Next))
(*(ordering/Ord.Next))
Int
none
univ
String