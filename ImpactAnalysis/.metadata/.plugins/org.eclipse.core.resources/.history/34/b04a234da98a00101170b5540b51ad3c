import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import edu.mit.csail.sdg.alloy4.A4Reporter;
import edu.mit.csail.sdg.alloy4.ErrorWarning;
import edu.mit.csail.sdg.ast.Command;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.parser.CompModule;
import edu.mit.csail.sdg.parser.CompUtil;
import edu.mit.csail.sdg.translator.A4Options;
import edu.mit.csail.sdg.translator.A4Solution;
import edu.mit.csail.sdg.translator.TranslateAlloyToKodkod;
import kodkod.solvers.PMaxSAT4JRef;
import kodkod.solvers.SAT4JRef;

public class ImpactAnalysis {
	
	public static void main (String [] args) throws FileNotFoundException, ParseException {


		//Read in suggestion situation from json results array
		String source = "formula";
		//String source = "generator";
		
		int cap_suggestions = 10;

		/*String [] models = {"singly-linked-list"};*/
		 String [] models = {"array", "bempl", "binary-tree", "class-diagram", "classroom","classroom-fol", "classroom-rl", "courses-v1",
				"courses-v2", "c-tree", "cv", "dll", "fsm", "grade", "graph", "handshake", "lts", "nqueens", 
				"production-line-v1", "production-line-v2", "production-line-v3", "singly-linked-list", "social-media", "train-station-fol",
				"train-station-ltl", "trash-fol", "trash-ltl", "trash-rl"
		};

		String result_dir = "results" + File.separator;
		
		String results = "";
		
		
		for(String model : models) {
			String directory = "test-results" + File.separator + source + File.separator + "multi_term" + File.separator + model + File.separator;
			
			String model_dir = "models" + File.separator;
			
			File folder = new File(directory);
			File[] listOfFiles = folder.listFiles();

			MyRep rep = new MyRep();
			    
			A4Options options = new A4Options();
			options.solver = SAT4JRef.INSTANCE;
			
			String base_model = "";
		     
		     try {
		         File myObj = new File(model_dir + model + ".als");
		         Scanner myReader = new Scanner(myObj);
		         while (myReader.hasNextLine()) {
		           base_model += myReader.nextLine() + "\n";
		         }
		         myReader.close();
		       } catch (FileNotFoundException e) {
		         System.out.println("An error occurred.");
		         e.printStackTrace();
		       }
		     base_model += "\n";
			
		     
		     //Parse model
		     CompModule world = CompUtil.parseEverything_fromFile(rep, null, model_dir + model + ".als");
		     
		     for(File file : listOfFiles) {
					String f = file.getName();
					if(f.contains("json")) {
						
						long start_time = System.nanoTime();
					
						File myObj = new File(directory + f);
					    Scanner myReader;
					    Object obj = null;

						myReader = new Scanner(myObj);
						while (myReader.hasNextLine()) {

							String data = myReader.nextLine();
							obj = new JSONParser().parse(data);
							
							JSONObject jo = (JSONObject) obj; 
							String incompleteLine = (String) jo.get("incompletionLine");
							String expectedCompletionLine = (String) jo.get("expectedCompletionLine");
							JSONArray evaluationResult = (JSONArray) jo.get("evaluationResult");
							String term = (String) jo.get("term");
							
							String line = incompleteLine + " " + expectedCompletionLine;
							String start_line = "";
							String end_line = "";
							String con_end_line = "";
							
							//known parameters for models
							HashMap<String, String> vars = new HashMap<String, String>();
							if(model.equals("bempl")) {
								world.addGlobal("r", CompUtil.parseOneExpression_fromString(world, "Room"));
								world.addGlobal("p", CompUtil.parseOneExpression_fromString(world, "Person"));
							}
							else if(model.equals("grade")) {
								world.addGlobal("c", CompUtil.parseOneExpression_fromString(world, "Class"));
								world.addGlobal("s", CompUtil.parseOneExpression_fromString(world, "Person"));
								world.addGlobal("a", CompUtil.parseOneExpression_fromString(world, "Assignment"));
							}
							else if(model.equals("singly-linked-list")) {
								world.addGlobal("l", CompUtil.parseOneExpression_fromString(world, "List"));
							}
							for(int r = 0; r < evaluationResult.size(); r++) {
					
								JSONObject result = (JSONObject) evaluationResult.get(r);
								String suggestion = (String) result.get("suggestion");
								
								String new_state_string = incompleteLine + " " + suggestion;
								
								String [] temp = incompleteLine.split(" ");
								Expr inital_state = null;
								String intial_state_string = "";
								for(int i = 0; i < temp.length; i++) {
									String attempt = "";
									for(int j = 0; j < temp.length - i; j++ ) {
										attempt += temp[j] + " ";
									}
									try {
										inital_state = CompUtil.parseOneExpression_fromString(world, attempt);
										intial_state_string = attempt;
										break;
									}
									catch(Exception e) {
										
									}
								}
								if(inital_state == null) {
									intial_state_string = "";
								}
								
								A4Solution target = null;
								Command c = world.getAllCommands().get(0); 
								int scope = 3;
								System.out.println("{" + intial_state_string + "} and {" + new_state_string +"}");
								Expr a_and_b_expr = CompUtil.parseOneExpression_fromString(world, "{" + intial_state_string + "} and {" + new_state_string +"}");
								Command a_and_b = new Command(false, scope, scope, scope, c.commandKeyword, a_and_b_expr);
								A4Solution a_and_b_instance = TranslateAlloyToKodkod.execute_command(rep, world.getAllReachableSigs(), a_and_b, options);
								
								if(a_and_b_instance.satisfiable()) {
									target = a_and_b_instance;
								}
								
								Expr a_and_not_b_expr = CompUtil.parseOneExpression_fromString(world, "{" + intial_state_string + "} and !{" + new_state_string +"}");
								Command a_and_not_b = new Command(false, scope, scope, scope, c.commandKeyword, a_and_not_b_expr);
								A4Solution a_and_b_not_instance;
								
								if(target != null) {
									a_and_b_not_instance = TranslateAlloyToKodkod.execute_command_with_target(rep, world.getAllReachableSigs(), a_and_not_b, options, target);
								}
								else {
									a_and_b_not_instance = TranslateAlloyToKodkod.execute_command(rep, world.getAllReachableSigs(), a_and_not_b, options);
									if(a_and_b_not_instance.satisfiable()) {
										target = a_and_b_not_instance;
									}
								}
								
								Expr not_a_and_b_expr = CompUtil.parseOneExpression_fromString(world, "!{" + intial_state_string + "} and {" + new_state_string +"}");
								Command not_a_and_b = new Command(false, scope, scope, scope, c.commandKeyword, not_a_and_b_expr);
								A4Solution not_a_and_b_instance;
								
								if(target != null) {
									not_a_and_b_instance = TranslateAlloyToKodkod.execute_command_with_target(rep, world.getAllReachableSigs(), not_a_and_b, options, target);
								}
								else {
									not_a_and_b_instance = TranslateAlloyToKodkod.execute_command(rep, world.getAllReachableSigs(), not_a_and_b, options);
									if(not_a_and_b_instance.satisfiable()) {
										target = not_a_and_b_instance;
									}
								}
								
								Expr not_a_and_not_b_expr = CompUtil.parseOneExpression_fromString(world, "!{" + intial_state_string + "} and !{" + new_state_string +"}");
								Command not_a_and_not_b = new Command(false, scope, scope, scope, c.commandKeyword, not_a_and_not_b_expr);
								A4Solution not_a_and_b_not_instance;
								
								if(target != null) {
									not_a_and_b_not_instance = TranslateAlloyToKodkod.execute_command_with_target(rep, world.getAllReachableSigs(), not_a_and_not_b, options, target);
								}
								else {
									not_a_and_b_not_instance = TranslateAlloyToKodkod.execute_command(rep, world.getAllReachableSigs(), not_a_and_not_b, options);
								}

							}
							
							
							
						}
					}
		     }
		}
	}
	
	public static void listFilesForFolder(final File folder) {
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	            listFilesForFolder(fileEntry);
	        } else {
	            System.out.println(fileEntry.getName());
	        }
	    }
	}
	
	  private static class MyRep extends A4Reporter {

        MyRep() {
        }


        public int pvars;
        public int vars;
        public int cls;
        
        @Override
        public void solve(int plength, int primaryVars, int totalVars, int clauses) {
        	pvars = primaryVars;
        	vars = totalVars;
        	cls = clauses;   
        }
    }

}
